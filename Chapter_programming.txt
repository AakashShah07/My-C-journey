//   -D, --disassemble-all    Display assembler contents of all sections
//       --disassemble=<sym>  Display assembler contents from <sym>
// aakash@aakash-HP-Laptop-15s-gr0xxx:~/My-C-journey$ objdump -D a.out | grep -A20 main.:
// 0000000000001149 <main>:
//     1149:       f3 0f 1e fa             endbr64 
//     114d:       55                      push   %rbp
//     114e:       48 89 e5                mov    %rsp,%rbp
//     1151:       48 83 ec 10             sub    $0x10,%rsp
//     1155:       c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)
//     115c:       eb 13                   jmp    1171 <main+0x28>
//     115e:       48 8d 05 9f 0e 00 00    lea    0xe9f(%rip),%rax        # 2004 <_IO_stdin_used+0x4>
//     1165:       48 89 c7                mov    %rax,%rdi
//     1168:       e8 e3 fe ff ff          call   1050 <puts@plt>
//     116d:       83 45 fc 01             addl   $0x1,-0x4(%rbp)
//     1171:       83 7d fc 0a             cmpl   $0xa,-0x4(%rbp)
//     1175:       7e e7                   jle    115e <main+0x15>
//     1177:       b8 00 00 00 00          mov    $0x0,%eax
//     117c:       c9                      leave  
//     117d:       c3                      ret    

// Disassembly of section .fini:

// 0000000000001180 <_fini>:
//     1180:       f3 0f 1e fa             endbr64 
// aakash@aakash-HP-Laptop-15s-gr0xxx:~/My-C-journey$ objdump -M intel a.out | grep -A20 main.:
// Usage: objdump <option(s)> <file(s)>
//  Display information from object <file(s)>.
//  At least one of the following switches must be given:
//   -a, --archive-headers    Display archive header information
//   -f, --file-headers       Display the contents of the overall file header
//   -p, --private-headers    Display object format specific file header contents
//   -P, --private=OPT,OPT... Display object format specific contents
//   -h, --[section-]headers  Display the contents of the section headers
//   -x, --all-headers        Display the contents of all headers
//   -d, --disassemble        Display assembler contents of executable sections
//   -D, --disassemble-all    Display assembler contents of all sections
//       --disassemble=<sym>  Display assembler contents from <sym>
//   -S, --source             Intermix source code with disassembly
//       --source-comment[=<txt>] Prefix lines of source code with <txt>
//   -s, --full-contents      Display the full contents of all sections requested
//   -g, --debugging          Display debug information in object file
//   -e, --debugging-tags     Display debug information using ctags style
//   -G, --stabs              Display (in raw form) any STABS info in the file
//   -W, --dwarf[a/=abbrev, A/=addr, r/=aranges, c/=cu_index, L/=decodedline,
//               f/=frames, F/=frames-interp, g/=gdb_index, i/=info, o/=loc,
//               m/=macro, p/=pubnames, t/=pubtypes, R/=Ranges, l/=rawline,
//               s/=str, O/=str-offsets, u/=trace_abbrev, T/=trace_aranges,
//               U/=trace_info]
//                            Display the contents of DWARF debug sections
//   -Wk,--dwarf=links        Display the contents of sections that link to
//                             separate debuginfo files
//   -WK,--dwarf=follow-links
//                            Follow links to separate debug info files (default)
//   -WN,--dwarf=no-follow-links
//                            Do not follow links to separate debug info files
//   -L, --process-links      Display the contents of non-debug sections in
//                             separate debuginfo files.  (Implies -WK)
//       --ctf[=SECTION]      Display CTF info from SECTION, (default `.ctf')
//   -t, --syms               Display the contents of the symbol table(s)
//   -T, --dynamic-syms       Display the contents of the dynamic symbol table
//   -r, --reloc              Display the relocation entries in the file
//   -R, --dynamic-reloc      Display the dynamic relocation entries in the file
//   @<file>                  Read options from <file>
//   -v, --version            Display this program's version number
//   -i, --info               List object formats and architectures supported
//   -H, --help               Display this information
// aakash@aakash-HP-Laptop-15s-gr0xxx:~/My-C-journey$ objdump -M intel -D a.out | grep -A20 main.:
// 0000000000001149 <main>:
//     1149:       f3 0f 1e fa             endbr64 
//     114d:       55                      push   rbp
//     114e:       48 89 e5                mov    rbp,rsp
//     1151:       48 83 ec 10             sub    rsp,0x10
//     1155:       c7 45 fc 00 00 00 00    mov    DWORD PTR [rbp-0x4],0x0
//     115c:       eb 13                   jmp    1171 <main+0x28>
//     115e:       48 8d 05 9f 0e 00 00    lea    rax,[rip+0xe9f]        # 2004 <_IO_stdin_used+0x4>
//     1165:       48 89 c7                mov    rdi,rax
//     1168:       e8 e3 fe ff ff          call   1050 <puts@plt>
//     116d:       83 45 fc 01             add    DWORD PTR [rbp-0x4],0x1
//     1171:       83 7d fc 0a             cmp    DWORD PTR [rbp-0x4],0xa
//     1175:       7e e7                   jle    115e <main+0x15>
//     1177:       b8 00 00 00 00          mov    eax,0x0
//     117c:       c9                      leave  
//     117d:       c3                      ret    

// Disassembly of section .fini:

// 0000000000001180 <_fini>:
//     1180:       f3 0f 1e fa             endbr64 


// 'main function initializes a local variable to 0, then enters a 
// loop that prints a string and increments the local variable. The loop continues until the local variable exceeds 10. Finally, the function returns 0.


// root@aakash-HP-Laptop-15s-gr0xxx:/home/aakash/My-C-journey# objdump -M  intel -D a.out | grep -A20 main.:
// 0000000000001149 <main>:
//     1149:       f3 0f 1e fa             endbr64 
//     114d:       55                      push   rbp
//     114e:       48 89 e5                mov    rbp,rsp
//     1151:       48 83 ec 10             sub    rsp,0x10
//     1155:       c7 45 fc 00 00 00 00    mov    DWORD PTR [rbp-0x4],0x0
//     115c:       eb 13                   jmp    1171 <main+0x28>
//     115e:       48 8d 05 9f 0e 00 00    lea    rax,[rip+0xe9f]        # 2004 <_IO_stdin_used+0x4>
//     1165:       48 89 c7                mov    rdi,rax
//     1168:       e8 e3 fe ff ff          call   1050 <puts@plt>
//     116d:       83 45 fc 01             add    DWORD PTR [rbp-0x4],0x1
//     1171:       83 7d fc 0a             cmp    DWORD PTR [rbp-0x4],0xa
//     1175:       7e e7                   jle    115e <main+0x15>
//     1177:       b8 00 00 00 00          mov    eax,0x0
//     117c:       c9                      leave  
//     117d:       c3                      ret    

// Disassembly of section .fini:

// 0000000000001180 <_fini>:
//     1180:       f3 0f 1e fa             endbr64 

The break Pointer is set tot he main(), so execution will stop right before out code is executed.
root@aakash-HP-Laptop-15s-gr0xxx:/home/aakash/My-C-journey# gdb -q ./a.out 
Reading symbols from ./a.out...
(gdb) break main
Breakpoint 1 at 0x1155: file firstprog.c, line 4.
(gdb) run
Starting program: /home/aakash/My-C-journey/a.out 
'[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main () at firstprog.c:4
warning: Source file is more recent than executable.
4           for(i=0;i<11;i++){
(gdb) info registers
rax            0x555555555149      93824992235849   General Purpose registers
rbx            0x0                 0                General Purpose registers
rcx            0x555555557dc0      93824992247232   General Purpose registers
rdx            0x7fffffffe478      140737488348280  General Purpose registers 
rsi            0x7fffffffe468      140737488348264 
rdi            0x1                 1
rbp            0x7fffffffe350      0x7fffffffe350
rsp            0x7fffffffe340      0x7fffffffe340
r8             0x7ffff7e1bf10      140737352154896
r9             0x7ffff7fc9040      140737353912384
r10            0x7ffff7fc3908      140737353890056
r11            0x7ffff7fde660      140737353999968
r12            0x7fffffffe468      140737488348264
r13            0x555555555149      93824992235849
r14            0x555555557dc0      93824992247232
r15            0x7ffff7ffd040      140737354125376
rip            0x555555555155      0x555555555155 <main+12>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) 



root@aakash-HP-Laptop-15s-gr0xxx:/home/aakash/My-C-journey# gdb -q ./a.out 
Reading symbols from ./a.out...
(gdb) break main
Breakpoint 1 at 0x1155: file firstprog.c, line 4.
(gdb) run
Starting program: /home/aakash/My-C-journey/a.out 
'[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main () at firstprog.c:4
warning: Source file is more recent than executable.
(gdb) set dis intel
root@aakash-HP-Laptop-15s-gr0xxx:/home/aakash/My-C-journey# gcc -g firstprog.c
root@aakash-HP-Laptop-15s-gr0xxx:/home/aakash/My-C-journey# gdb -q ./a.out 
Reading symbols from ./a.out...
(gdb) list
1       #include<stdio.h>
2       int main(){
3           int i;
4           for(i=0;i<11;i++){
5               printf("Hello world\n");}
6
7           return 0;
8       }
(gdb) disassemble main
Dump of assembler code for function main:
   0x0000000000001149 <+0>:     endbr64 
   0x000000000000114d <+4>:     push   rbp
   0x000000000000114e <+5>:     mov    rbp,rsp
   0x0000000000001151 <+8>:     sub    rsp,0x10
   0x0000000000001155 <+12>:    mov    DWORD PTR [rbp-0x4],0x0
   0x000000000000115c <+19>:    jmp    0x1171 <main+40>
   0x000000000000115e <+21>:    lea    rax,[rip+0xe9f]        # 0x2004
   0x0000000000001165 <+28>:    mov    rdi,rax
   0x0000000000001168 <+31>:    call   0x1050 <puts@plt>
   0x000000000000116d <+36>:    add    DWORD PTR [rbp-0x4],0x1
   0x0000000000001171 <+40>:    cmp    DWORD PTR [rbp-0x4],0xa
   0x0000000000001175 <+44>:    jle    0x115e <main+21>
   0x0000000000001177 <+46>:    mov    eax,0x0
   0x000000000000117c <+51>:    leave  
   0x000000000000117d <+52>:    ret    
End of assembler dump.
(gdb) break main
Breakpoint 1 at 0x1155: file firstprog.c, line 4.
(gdb) run
Starting program: /home/aakash/My-C-journey/a.out 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main () at firstprog.c:4
4           for(i=0;i<11;i++){
(gdb) info register eip
Invalid register `eip'
(gdb) info register rip
rip            0x555555555155      0x555555555155 <main+12>
(gdb) o
Ambiguous command "o": obscure, output, ov, overlay, ovly.
(gdb) i r rip
rip            0x555555555155      0x555555555155 <main+12>
(gdb) quit
A debugging session is active.

        Inferior 1 [process 11496] will be killed.

Quit anyway? (y or n) y